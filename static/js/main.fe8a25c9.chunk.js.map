{"version":3,"sources":["settings.js","api.js","components/WeatherInfo/WeatherInfo.jsx","App.jsx","index.js"],"names":["cityToSearchFor","id","name","country","coord","lon","lat","openWeatherUrlBy","cityName","concat","dateFormatter","date","split","transform","items","forecast","arguments","length","undefined","numberOfItems","slice","take","Object","entries","property","propertyFormatter","i","reduce","ac","cv","key","push","groupBy","map","_ref4","_ref5","slicedToArray","temperature","average","Number","parseFloat","_ref","main","temp","toFixed","min","Math","apply","toConsumableArray","_ref2","temp_min","lowestMinTemperature","max","_ref3","temp_max","highestmaxTemperature","getForecast","_ref6","asyncToGenerator","regenerator_default","a","mark","_callee","response","data","wrap","_context","prev","next","fetch","method","headers","Headers","append","sent","json","abrupt","list","t0","console","warn","stop","this","_x","WeatherInfo","_ref$temperature","react_default","createElement","className","defaultProps","App","state","componentDidMount","_this","searchForecast","city","then","setState","_this$state","WeatherInfo_WeatherInfo","assign","Component","ReactDOM","render","React","document","getElementById"],"mappings":"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","file":"static/js/main.fe8a25c9.chunk.js","sourcesContent":["const apiKey = '66f7ad5a045c4d272430113c7ce497a1';\nexport const cityToSearchFor = {\n  id: 3333229,\n  name: 'Edinburgh',\n  country: 'GB',\n  coord: {\n    lon: -3.19333,\n    lat: 55.94973,\n  },\n};\nexport const defaultNumberOfDays = 5;\nexport const openWeatherUrlBy = cityName =>\n  `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&APPID=${apiKey}`;\n","import { openWeatherUrlBy, defaultNumberOfDays } from './settings';\n\nconst fetchInit = () => ({\n  method: 'GET',\n  headers: new Headers().append('Content-Type', 'application/json'),\n});\n\nexport const dateFormatter = date => date.split(' ')[0];\nexport const take = (items, numberOfItems) => items.slice(0, numberOfItems);\n\n/* eslint-disable no-param-reassign */\nexport const groupBy = (items, property, propertyFormatter = i => i) =>\n  items.reduce((ac, cv) => {\n    const key = propertyFormatter(cv[property]);\n    (ac[key] = ac[key] || []).push(cv);\n    return ac;\n  }, {});\n/* eslint-enable no-param-reassign */\n\nexport const averageTemperature = items =>\n  +Number.parseFloat(\n    items.map(({ main }) => main.temp).reduce((ac, cv) => ac + cv, 0) /\n      items.length,\n  ).toFixed(2);\nexport const lowestMinTemperature = items =>\n  Math.min(...items.map(({ main }) => main.temp_min));\nexport const highestmaxTemperature = items =>\n  Math.max(...items.map(({ main }) => main.temp_max));\n\nconst groupedForecast = items => groupBy(items, 'dt_txt', dateFormatter);\n\nexport const transform = (forecast = []) =>\n  take(Object.entries(groupedForecast(forecast)), defaultNumberOfDays).map(\n    ([date, entries]) => ({\n      date,\n      temperature: {\n        average: averageTemperature(entries),\n        min: lowestMinTemperature(entries),\n        max: highestmaxTemperature(entries),\n      },\n    }),\n  );\n\nexport const getForecast = async cityName => {\n  try {\n    const response = await fetch(openWeatherUrlBy(cityName), fetchInit());\n    const data = await response.json();\n    return transform(data.list);\n  } catch (error) {\n    /* eslint-disable no-console */\n    return console.warn('Failed to retrieve forecast information', error);\n    /* eslint-enable no-console */\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './WeatherInfo.css';\n\nexport default function WeatherInfo({\n  date,\n  temperature: { average, max, min },\n}) {\n  return (\n    <div className=\"weather-info\">\n      <h2 className=\"date\">{date}</h2>\n      <div className=\"temperature-info\">\n        <span>average: {average}</span>\n        <span>max: {max}</span>\n        <span>min: {min}</span>\n      </div>\n    </div>\n  );\n}\n\nWeatherInfo.propTypes = {\n  date: PropTypes.string,\n  temperature: PropTypes.shape({\n    average: PropTypes.number,\n    min: PropTypes.number,\n    max: PropTypes.number,\n  }),\n};\n\nWeatherInfo.defaultProps = {\n  date: 'today',\n  temperature: {\n    average: 0,\n    min: 0,\n    max: 0,\n  },\n};\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { cityToSearchFor } from './settings';\nimport { getForecast } from './api';\nimport { WeatherInfo } from './components';\n\nclass App extends Component {\n  state = {\n    forecast: [],\n    cityName: cityToSearchFor.name,\n  };\n\n  componentDidMount = () => this.searchForecast(this.state.cityName);\n\n  searchForecast = city =>\n    getForecast(city).then(forecast => this.setState(() => ({ forecast })));\n\n  render() {\n    const { forecast, cityName } = this.state;\n    return (\n      <div className=\"app\">\n        <header>\n          <h1 className=\"title\">{`${cityName} forecast`}</h1>\n        </header>\n        <div className=\"forecast\">\n          {forecast.map(({ date, temperature }) => (\n            <WeatherInfo key={date} {...{ date, temperature }} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}